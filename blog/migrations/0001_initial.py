# Generated by Django 2.2 on 2020-08-03 10:23

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthday', models.DateField(null=True)),
                ('phone_number', models.CharField(max_length=15, null=True)),
                ('gender', models.PositiveIntegerField(choices=[(1, 'Erkek'), (0, 'Kadın')], null=True)),
                ('marital_status', models.PositiveIntegerField(choices=[(1, 'Bekar'), (0, 'Evli')], null=True)),
                ('educational_status', models.PositiveIntegerField(choices=[(0, 'İlkokul'), (1, 'Ortaokul'), (2, 'Lise'), (3, 'Üniversite'), (4, 'Yüksek Lisans / Doktora')], null=True)),
                ('profession', models.PositiveIntegerField(choices=[(0, 'Özel Sektör'), (1, 'Öğrenci'), (2, 'Kamu Çalışanı'), (3, 'Serbest Meslek'), (4, 'Ev Hanımı'), (5, 'Emekli'), (6, 'Çalışmıyorum'), (7, 'Çiftçi')], null=True)),
                ('profile_image', models.FileField(blank=True, default='/static/img/indir.jpg', null=True, upload_to='images/', verbose_name='Profil İmage')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Interest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('subtitle', models.CharField(max_length=100, verbose_name='Sub Title')),
                ('content', ckeditor.fields.RichTextField(verbose_name='İçerik')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('image', models.FileField(blank=True, default='/images/post-sample-image.jpg', null=True, upload_to='images/', verbose_name='Post İmage')),
                ('category', models.PositiveIntegerField(choices=[(0, 'Python'), (1, 'Java'), (2, 'Javascript'), (3, 'Linux'), (4, 'Css'), (5, 'Html'), (6, 'React'), (7, 'Devops')], null=True)),
                ('is_favorite', models.BooleanField(default=False)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Author')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NewComment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_parent', models.BooleanField(default=False)),
                ('object_id', models.PositiveIntegerField()),
                ('icerik', models.TextField(max_length=1000, null=True, verbose_name='Yorum')),
                ('comment_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('content_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('user', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'iç içe yorum',
            },
        ),
        migrations.CreateModel(
            name='FavoriteBlog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='favorite_blog', to='blog.Post')),
                ('user', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='favorite_blog', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Favorilere Eklenen Gönderiler',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icerik', models.TextField(max_length=1000, null=True, verbose_name='Yorum')),
                ('comment_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('post', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment', to='blog.Post')),
                ('user', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comment', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Yorumlar',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='interests',
            field=models.ManyToManyField(to='blog.Interest'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
